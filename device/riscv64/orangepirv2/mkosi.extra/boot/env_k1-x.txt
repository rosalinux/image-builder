// Common parameter
product_name=k1-x_orangepi-rv2
earlycon=sbi
console=ttyS0,115200
init=/init
bootdelay=2
baudrate=115200
loglevel=8 audit=0
stderr=serial
stdin=serial,usbkbd
stdout=serial
overlay_prefix=spacemit

//partitions/mtdparts/mtdids would set while flashing env.bin

// Nor flash rootfs device
nor_root=/dev/mtdblock6
nor_rootfstype=squashfs

// eMMC/SDCard rootfs device
mmc_rootfstype=ext4

// Get "rootfs" partition number in decimal, and set var "mmc_root"
// Variable "boot_devnum" is set during board_lat_init()
set_mmc_root=if part number mmc ${boot_devnum} rootfs rootfs_part; then \
             setexpr rootfs_part ${rootfs_part} + 0; \
             else setenv rootfs_part 2; fi\
             setenv mmc_root "/dev/mmcblk${boot_devnum}p${rootfs_part}";

set_nvme_root=part number nvme ${boot_devnum} rootfs rootfs_part; \
             setexpr rootfs_part ${rootfs_part} + 0; \
             setenv nvme_root "/dev/nvme${boot_devnum}n1p${rootfs_part}";

//override here, otherwise gen random addr and save to eeprom by uboot
//ethaddr=fe:fe:fe:22:22:01
//eth1addr=fe:fe:fe:22:22:02

ipaddr=10.0.92.100
netmask=255.255.255.0
serverip=10.0.92.134
gatewayip=10.0.92.1
net_data_path=net_flash_file/net_flash_file/

preboot=
kernel_addr_r=0x10000000
ramdisk_addr=0x20000000
ramdisk_size=-
ramdisk_combo=-
knl_name=KERNEL_IMAGE
ramdisk_name=INITRD_IMAGE
dtb_dir=dtbs/spacemit
dtb_name=dtbs/spacemit/k1-x_orangepi-rv2.dtb
dtb_addr=0x1F000000
splashfile=bianbu.bmp
mdio_intf=
phyaddr0=1
phy_link_time=10000
netdev=eth0

// Common boot args
commonargs=setenv bootargs earlycon=${earlycon} earlyprintk console=tty1 console=${console} loglevel=${loglevel} clk_ignore_unused swiotlb=65536 rdinit=${init}

//detect product_name from env and select dtb file to load
dtb_env=if test -n "${product_name}"; then \
                if test "${product_name}" = k1_evb; then \
                    setenv dtb_name ${dtb_dir}/k1-x_evb.dtb; \
                elif test "${product_name}" = k1_deb1; then \
                    setenv dtb_name ${dtb_dir}/k1-x_deb1.dtb; \
                elif test "${product_name}" = k1_deb2; then \
                    setenv dtb_name ${dtb_dir}/k1-x_deb2.dtb; \
                elif test "${product_name}" = k1_hs450; then \
                    setenv dtb_name ${dtb_dir}/k1-x_hs450.dtb; \
                elif test "${product_name}" = k1_kx312; then \
                    setenv dtb_name ${dtb_dir}/k1-x_kx312.dtb; \
                elif test "${product_name}" = k1_mingo; then \
                    setenv dtb_name ${dtb_dir}/k1-x_mingo.dtb; \
                elif test "${product_name}" = k1_MINI-PC; then \
                    setenv dtb_name ${dtb_dir}/k1-x_MINI-PC.dtb; \
                else \
                    echo "falling to default dtb: ${dtb_dir}/${product_name}.dtb"; \
                    setenv dtb_name  ${dtb_dir}/${product_name}.dtb; \
                fi; \
            fi;

detect_dtb=echo "product_name: ${product_name}"; run dtb_env; echo "select ${dtb_name} to load";

loadknl=echo "Loading kernel..."; \
            load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${kernel_addr_r} ${knl_name};

loadramdisk=echo "Loading ramdisk ..."; \
            if load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${ramdisk_addr} ${ramdisk_name}; then \
                size ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${ramdisk_name}; \
                setenv ramdisk_size ${filesize}; \
                setenv ramdisk_combo ${ramdisk_addr}:${ramdisk_size}; \
            else \
                echo "load ramdisk from bootfs fail, use built-in ramdisk"; \
                setenv ramdisk_addr -; \
            fi;

loaddtb=echo "Loading dtb..."; \
            if load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${dtb_addr} ${dtb_name}; then \
            else \
                echo "load dtb from bootfs fail, use built-in dtb"; \
                setenv dtb_addr ""; \
            fi;

// Nor+ssd boot combo
set_nor_args=setenv bootargs ${bootargs} mtdparts=${mtdparts} root=${nvme_root} rootfstype=ext4
nor_boot=echo "Try to boot from NVMe ..."; \
         run commonargs; \
         run set_nvme_root; \
         run set_nor_args; \
         run detect_dtb; \
         run loadknl; \
         run loaddtb; \
         run loadoverlay; \
         run loadramdisk; \
         bootm ${kernel_addr_r} ${ramdisk_combo} ${dtb_addr}; \
         echo "########### boot kernel failed by default config, check your boot config #############"

//##############################################################################
// eMMC/SDCard boot
//##############################################################################
set_mmc_args=setenv bootargs "${bootargs}" root=${mmc_root} rootwait rootfstype=${mmc_rootfstype} board=bpi-f3;

mmc_boot=echo "Try to boot from MMC${boot_devnum} ..."; \
         run commonargs; \
         run set_mmc_root; \
         run set_mmc_args; \
         run detect_dtb; \
         run loadknl; \
         run loaddtb; \
         run loadoverlay; \
         run loadramdisk; \
         booti ${kernel_addr_r} ${ramdisk_combo} ${dtb_addr}; \
         echo "########### boot kernel failed by default config, check your boot config #############"

// Variable "boot_device" is set during board_late_init()
autoboot=if test ${boot_device} = nand; then \
                run nand_boot; \
        elif test ${boot_device} = nor; then \
                run nor_boot; \
        elif test ${boot_device} = mmc; then \
                run mmc_boot; \
        fi;

bootcmd=run autoboot; echo "run autoboot"

// Boot menu definitions
boot_default=echo "Current Boot Device: ${boot_device}"
flash_default=echo "Returning to Boot Menu..."
flash_from_usb=echo "recovery from usb...... "; \
					  flash_image usb;
flash_from_mmc=echo "recovery from mmc...... " \
					  flash_image mmc;
flash_from_net=echo "recovery from net...... " \
					  flash_image net;

bootmenu_delay=5
bootmenu_0="-------- Boot Options --------"=run boot_default
bootmenu_1="Boot from Nor"=run nor_boot
bootmenu_2="Boot from Nand"=run nand_boot
bootmenu_3="Boot from MMC"=run mmc_boot
bootmenu_4="Autoboot"=run autoboot
bootmenu_5="Show current Boot Device"=run boot_default
bootmenu_6="-------- Flash Options --------"=run flash_default
bootmenu_7="recovery from usb"=run flash_from_usb
bootmenu_8="recovery from mmc"=run flash_from_mmc
bootmenu_9="recovery from net"=run flash_from_net


loadoverlay=setenv load_addr "0x44000000" \
        setenv overlay_error "false" \
        fdt addr ${dtb_addr} \
        fdt resize 65536 \
        if load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${load_addr} bootenv.txt; then \
            echo "Applying bootenv.txt" \
            env import -t ${load_addr} ${filesize} \
        fi \
        for overlay_file in ${overlays}; do \
            if load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${load_addr} ${dtb_dir}/overlay/${overlay_file}.dtbo; then \
                echo "Applying kernel provided DT overlay ${overlay_file}.dtbo" \
                fdt apply ${load_addr} || setenv overlay_error "true" \
            fi \
        done \
        if test "${overlay_error}" = "true"; then \
            echo "Error applying DT overlays, restoring original DT" \
            load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${dtb_addr} ${dtb_name} \
        else \
            if load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${load_addr} ${dtb_dir}/overlay/${overlay_prefix}-fixup.scr; then \
                echo "Applying kernel provided DT fixup script (${overlay_prefix}-fixup.scr)" \
                source ${load_addr} \
            fi \
            if test -e ${bootfs_devname} ${boot_devnum}:${bootfs_part} fixup.scr; then \
                load ${bootfs_devname} ${boot_devnum}:${bootfs_part} ${load_addr} fixup.scr \
                echo "Applying user provided fixup script (fixup.scr)" \
                source ${load_addr} \
            fi \
        fi;
